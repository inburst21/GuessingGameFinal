<?xml version="1.0" encoding="utf-8"?>
<!--res file for designing UI of application-->

<!--For this app we'll be using a Linear Layout. Since
everything will just stack top-to-bottom with no
Relative positioning, make sure to set orientation to vertical-->
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    >

  <!--This is where we'll put the textView instructions for
  the application, also, remove constraints, since we're
  not using a constraint layout anymore.

  With textSize we're setting how large we want the text to be

  gravity allows you to position the textview. center centers
  it in the app window

  margin_top will allow us to move the text down-->

  <!--Now we've generated a string resource value of our instructions to be used when starting the game
  and given the textview an id. We'll also give it a centered gravity
  so the text stays centered, even on multiple lines.-->

  <TextView
      android:gravity="center"
      android:id="@+id/instructions"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:layout_gravity="center"
      android:layout_marginTop="50dp"
      android:text="@string/instructions"
      android:textSize="20sp"
      />

  <!--Adds the EditText, which will hold the user's guess-->

  <!--inputType Makes the editText, when clicked reveal a grid numberpad.-->

  <!--Now we've given an id to our edit text, so that we can bind it in code.-->

  <EditText
      android:id="@+id/input_field"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:layout_gravity="center"
      android:layout_marginTop="25dp"
      android:inputType="number"
      android:textSize="50sp"
      />


  <!--Adds button to layout to show how we'll be adding buttons-->

  <!--Adds decoration for the button, making it the width of the
 screen, blue, with white text.-->

  <!--margin makes the button smaller-->

  <!--adding an id to the button will allow us to represent it in code in our Java file.-->
  <Button
      android:id="@+id/button_submit"
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:layout_gravity="center"
      android:layout_margin="15dp"
      android:background="@color/colorPrimary"
      android:text="Submit"
      android:textColor="@android:color/white"
      android:textSize="20sp"
      />

  <!--Makes the visibility of the button gone. The difference
  between gone and invisible is that an invisible button
  can still be clicked, it just can't be seen. gone makes
  it completely unavailable until stated otherwise-->

  <!--Finally, we're giving an id to our restart button-->


</LinearLayout>
